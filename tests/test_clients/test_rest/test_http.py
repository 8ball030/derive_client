from decimal import Decimal

import pytest

from derive_client._clients.rest.http.client import HTTPClient
from derive_client.data.generated.models import (
    CurrencyDetailedResponseSchema,
    Direction,
    InstrumentPublicResponseSchema,
    InstrumentType,
    PrivateCancelByInstrumentResultSchema,
    PrivateCancelByLabelResultSchema,
    PrivateCancelByNonceResultSchema,
    PrivateCancelResultSchema,
    PrivateDepositResultSchema,
    PrivateGetAccountResultSchema,
    PrivateGetOpenOrdersResultSchema,
    PrivateGetOrderResultSchema,
    PrivateGetOrdersParamsSchema,
    PrivateGetOrdersResponseSchema,
    PrivateGetOrdersResultSchema,
    PrivateGetSubaccountResultSchema,
    PrivateGetSubaccountsParamsSchema,
    PrivateGetSubaccountsResponseSchema,
    PrivateGetSubaccountsResultSchema,
    PrivateOrderResultSchema,
    PrivateReplaceResultSchema,
    PrivateSessionKeysResultSchema,
    PrivateWithdrawResultSchema,
    PublicGetAllInstrumentsResultSchema,
    PublicGetCurrencyResultSchema,
    PublicGetInstrumentResultSchema,
    PublicGetTickerParamsSchema,
    PublicGetTickerResponseSchema,
    PublicGetTickerResultSchema,
    Result,
)
from derive_client.data_types import Environment

TEST_WALLET = "0x8772185a1516f0d61fC1c2524926BfC69F95d698"
TEST_SESSION_KEY = "0x2ae8be44db8a590d20bffbe3b6872df9b569147d3bf6801a35a28281a4816bbd"
SUBACCOUNT_IDS = [31049, 30769]


@pytest.fixture
def client():
    client = HTTPClient(
        wallet=TEST_WALLET,
        session_key=TEST_SESSION_KEY,
        subaccount_id=SUBACCOUNT_IDS[0],
        env=Environment.TEST,
    )
    return client


# Autogenerated API
def test_public_get_ticker(client):
    instrument_name = "ETH-PERP"
    params = PublicGetTickerParamsSchema(instrument_name=instrument_name)
    response = client.public.get_ticker(params=params)
    assert isinstance(response, PublicGetTickerResponseSchema)


def test_get_private_get_subaccounts(client):
    wallet = TEST_WALLET
    params = PrivateGetSubaccountsParamsSchema(wallet=wallet)
    response = client.private.get_subaccounts(params=params)
    assert isinstance(response, PrivateGetSubaccountsResponseSchema)


def test_get_private_get_orders(client):
    subaccount_id = SUBACCOUNT_IDS[0]
    params = PrivateGetOrdersParamsSchema(subaccount_id=subaccount_id)
    response = client.private.get_orders(params=params)
    assert isinstance(response, PrivateGetOrdersResponseSchema)


# Accounts
def test_account_session_keys(client):
    session_keys = client.account.session_keys()
    assert isinstance(session_keys, PrivateSessionKeysResultSchema)


def test_account_get_all_portfolios(client):
    all_portfolios = client.account.get_all_portfolios()
    assert isinstance(all_portfolios, list)
    assert all(isinstance(item, PrivateGetSubaccountResultSchema) for item in all_portfolios)


def test_account_get_subaccount(client):
    subaccount = client.account.get_subaccount()
    assert isinstance(subaccount, PrivateGetSubaccountResultSchema)


def test_account_get_subaccounts(client):
    subaccounts = client.account.get_subaccounts()
    assert isinstance(subaccounts, PrivateGetSubaccountsResultSchema)


def test_account_get(client):
    account = client.account.get()
    assert isinstance(account, PrivateGetAccountResultSchema)


# Markets
def test_markets_get_currency(client):
    currency = "ETH"
    currency = client.markets.get_currency(currency=currency)
    assert isinstance(currency, PublicGetCurrencyResultSchema)


def test_markets_get_all_currencies(client):
    currencies = client.markets.get_all_currencies()
    assert isinstance(currencies, list)
    assert all(isinstance(item, CurrencyDetailedResponseSchema) for item in currencies)


def test_markets_get_instrument(client):
    instrument_name = "ETH-PERP"
    instrument = client.markets.get_instrument(instrument_name=instrument_name)
    assert isinstance(instrument, PublicGetInstrumentResultSchema)


def test_markets_get_instruments(client):
    currency = "ETH"
    expired = False
    instrument_type = InstrumentType.option
    instruments = client.markets.get_instruments(
        currency=currency,
        expired=expired,
        instrument_type=instrument_type,
    )
    assert isinstance(instruments, list)
    assert all(isinstance(item, InstrumentPublicResponseSchema) for item in instruments)


def test_markets_get_all_instruments(client):
    expired = False
    instrument_type = InstrumentType.perp
    currency = None
    page = 1
    page_size = 100
    all_instruments = client.markets.get_all_instruments(
        expired=expired,
        instrument_type=instrument_type,
        currency=currency,
        page=page,
        page_size=page_size,
    )
    assert isinstance(all_instruments, PublicGetAllInstrumentsResultSchema)


def test_markets_get_ticker(client):
    instrument_name = "ETH-PERP"
    ticker = client.markets.get_ticker(instrument_name=instrument_name)
    assert isinstance(ticker, PublicGetTickerResultSchema)


def test_markets_get_all_tickers(client):
    currency = "ETH"
    expired = False
    instrument_type = InstrumentType.perp
    tickers = client.markets.get_all_tickers(
        currency=currency,
        expired=expired,
        instrument_type=instrument_type,
    )
    assert isinstance(tickers, list)
    assert all(isinstance(item, PublicGetTickerResultSchema) for item in tickers)


# Funding
def test_funding_deposit(client):
    amount = Decimal("0.10")
    asset_name = "USDC"
    deposit = client.funding.deposit(amount=amount, asset_name=asset_name)
    assert isinstance(deposit, PrivateDepositResultSchema)


def test_funding_withdraw(client):
    amount = Decimal("0.10")
    asset_name = "USDC"
    withdrawal = client.funding.withdraw(amount=amount, asset_name=asset_name)
    assert isinstance(withdrawal, PrivateWithdrawResultSchema)


# Orders
def _create_order(client) -> PrivateOrderResultSchema:
    amount = Decimal("0.10")
    direction = Direction.buy
    instrument_name = "ETH-PERP"
    limit_price = Decimal("200.00")
    max_fee = Decimal("1000")
    label = "test_order"
    order = client.orders.create(
        amount=amount,
        direction=direction,
        instrument_name=instrument_name,
        limit_price=limit_price,
        max_fee=max_fee,
        label=label,
    )
    return order


def test_orders_create(client):
    order = _create_order(client)
    assert isinstance(order, PrivateOrderResultSchema)


def test_orders_get(client):
    order = _create_order(client)
    order_id = order.order.order_id
    order = client.orders.get(order_id=order_id)
    assert isinstance(order, PrivateGetOrderResultSchema)


def test_orders_list(client):
    orders = client.orders.list()
    assert isinstance(orders, PrivateGetOrdersResultSchema)


def test_orders_list_open(client):
    open_orders = client.orders.list_open()
    assert isinstance(open_orders, PrivateGetOpenOrdersResultSchema)


def test_orders_cancel(client):
    order = _create_order(client)
    order_id = order.order.order_id
    cancelled = client.orders.cancel(
        instrument_name=order.order.instrument_name,
        order_id=order_id,
    )
    assert isinstance(cancelled, PrivateCancelResultSchema)


def test_orders_cancel_by_label(client):
    order = _create_order(client)
    cancelled_by_label = client.orders.cancel_by_label(label=order.order.label)
    assert isinstance(cancelled_by_label, PrivateCancelByLabelResultSchema)


def test_orders_cancel_by_nonce(client):
    order = _create_order(client)
    cancelled_by_label = client.orders.cancel_by_nonce(
        instrument_name=order.order.instrument_name,
        nonce=order.order.nonce,
    )
    assert isinstance(cancelled_by_label, PrivateCancelByNonceResultSchema)


def test_orders_cancel_by_instrument(client):
    order = _create_order(client)
    cancelled_by_label = client.orders.cancel_by_instrument(instrument_name=order.order.instrument_name)
    assert isinstance(cancelled_by_label, PrivateCancelByInstrumentResultSchema)


def test_orders_cancel_all(client):
    cancelled_all = client.orders.cancel_all()
    assert isinstance(cancelled_all, Result)


def test_orders_replace(client):
    order = _create_order(client)
    order_id = order.order.order_id
    replace = client.orders.replace(
        amount=order.order.amount,
        direction=order.order.direction,
        instrument_name=order.order.instrument_name,
        limit_price=order.order.limit_price,
        max_fee=order.order.max_fee,
        order_id_to_cancel=order_id,
    )
    assert isinstance(replace, PrivateReplaceResultSchema)
